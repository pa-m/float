// Code generated by float_nocgo.go.tmpl. DO NOT EDIT.

//+build !cgo !amd64 noasm

package float

// AddTo  for []float32
func (f32 F32) AddTo(dst, a, b []float32) {
	f32.unrolledAddTo(dst, a, b)

}

// SubTo  for []float32
func (f32 F32) SubTo(dst, a, b []float32) {
	f32.unrolledSubTo(dst, a, b)

}

// MulTo  for []float32
func (f32 F32) MulTo(dst, a, b []float32) {
	f32.unrolledMulTo(dst, a, b)

}

// ScaleTo  for []float32
func (f32 F32) ScaleTo(dst, a []float32, scale float32) {
	f32.unrolledScaleTo(dst, a, scale)

}

// Sum for []float32
func (f32 F32) Sum(a []float32) float32 {
	{
		return f32.unrolledSum(a)
	}
}

// Dot for []float32
func (f32 F32) Dot(a, b []float32) float32 {
	{
		return f32.unrolledDot(a, b)
	}
}

// AddTo  for []float64
func (f64 F64) AddTo(dst, a, b []float64) {
	f64.unrolledAddTo(dst, a, b)

}

// SubTo  for []float64
func (f64 F64) SubTo(dst, a, b []float64) {
	f64.unrolledSubTo(dst, a, b)

}

// MulTo  for []float64
func (f64 F64) MulTo(dst, a, b []float64) {
	f64.unrolledMulTo(dst, a, b)

}

// ScaleTo  for []float64
func (f64 F64) ScaleTo(dst, a []float64, scale float64) {
	f64.unrolledScaleTo(dst, a, scale)

}

// Sum for []float64
func (f64 F64) Sum(a []float64) float64 {
	{
		return f64.unrolledSum(a)
	}
}

// Dot for []float64
func (f64 F64) Dot(a, b []float64) float64 {
	{
		return f64.unrolledDot(a, b)
	}
}

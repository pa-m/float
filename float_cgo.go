// Code generated by float_cgo.go.tmpl. DO NOT EDIT.

//+build amd64,cgo

package float

import (
	"./avx"
	"golang.org/x/sys/cpu"
)

// vanillaSum for []float32
func (F32) vanillaSum(a []float32) float32 {
	acc := float32(0)
	for _, v := range a {
		acc += v
	}
	return acc
}

// Sum for []float32
func (f32 F32) Sum(a []float32) float32 {
	if cpu.X86.HasAVX2 {
		return avx.Sum32(a)
	} else {
		return f32.vanillaSum(a)
	}
}

// vanillaDot for []float32
func (F32) vanillaDot(a, b []float32) float32 {
	acc := float32(0)
	for i, v := range a {
		acc += v * b[i]
	}
	return acc
}

// Dot for []float32
func (f32 F32) Dot(a, b []float32) float32 {
	if cpu.X86.HasAVX2 {
		return avx.Dot32(len(a), a, b)
	} else {
		return f32.vanillaDot(a, b)
	}
}

// vanillaSum for []float64
func (F64) vanillaSum(a []float64) float64 {
	acc := float64(0)
	for _, v := range a {
		acc += v
	}
	return acc
}

// Sum for []float64
func (f64 F64) Sum(a []float64) float64 {
	if cpu.X86.HasAVX2 {
		return avx.Sum64(a)
	} else {
		return f64.vanillaSum(a)
	}
}

// vanillaDot for []float64
func (F64) vanillaDot(a, b []float64) float64 {
	acc := float64(0)
	for i, v := range a {
		acc += v * b[i]
	}
	return acc
}

// Dot for []float64
func (f64 F64) Dot(a, b []float64) float64 {
	if cpu.X86.HasAVX2 {
		return avx.Dot64(len(a), a, b)
	} else {
		return f64.vanillaDot(a, b)
	}
}

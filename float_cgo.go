// Code generated by float_cgo.go.tmpl. DO NOT EDIT.

//+build amd64,cgo

package float

import (
	"./avx"
	"golang.org/x/sys/cpu"
)

// AddTo  for []float32
func (f32 F32) AddTo(dst, a, b []float32) {
	if cpu.X86.HasAVX2 {
		(avx.F32{}).AddTo(dst, a, b)
	} else {
		f32.vanillaAddTo(dst, a, b)
	}
}

// SubTo  for []float32
func (f32 F32) SubTo(dst, a, b []float32) {
	if cpu.X86.HasAVX2 {
		(avx.F32{}).SubTo(dst, a, b)
	} else {
		f32.vanillaSubTo(dst, a, b)
	}
}

// MulTo  for []float32
func (f32 F32) MulTo(dst, a, b []float32) {
	if cpu.X86.HasAVX2 {
		(avx.F32{}).MulTo(dst, a, b)
	} else {
		f32.vanillaMulTo(dst, a, b)
	}
}

// ScaleTo  for []float32
func (f32 F32) ScaleTo(dst, a []float32, scale float32) {
	if cpu.X86.HasAVX2 {
		(avx.F32{}).ScaleTo(dst, a, scale)
	} else {
		f32.vanillaScaleTo(dst, a, scale)
	}
}

// Sum for []float32
func (f32 F32) Sum(a []float32) float32 {
	if cpu.X86.HasAVX2 {
		return (avx.F32{}).Sum(a)
	} else {
		return f32.vanillaSum(a)
	}
}

// Dot for []float32
func (f32 F32) Dot(a, b []float32) float32 {
	if cpu.X86.HasAVX2 {
		return (avx.F32{}).Dot(a, b)
	} else {
		return f32.vanillaDot(a, b)
	}
}

// AddTo  for []float64
func (f64 F64) AddTo(dst, a, b []float64) {
	if cpu.X86.HasAVX2 {
		(avx.F64{}).AddTo(dst, a, b)
	} else {
		f64.vanillaAddTo(dst, a, b)
	}
}

// SubTo  for []float64
func (f64 F64) SubTo(dst, a, b []float64) {
	if cpu.X86.HasAVX2 {
		(avx.F64{}).SubTo(dst, a, b)
	} else {
		f64.vanillaSubTo(dst, a, b)
	}
}

// MulTo  for []float64
func (f64 F64) MulTo(dst, a, b []float64) {
	if cpu.X86.HasAVX2 {
		(avx.F64{}).MulTo(dst, a, b)
	} else {
		f64.vanillaMulTo(dst, a, b)
	}
}

// ScaleTo  for []float64
func (f64 F64) ScaleTo(dst, a []float64, scale float64) {
	if cpu.X86.HasAVX2 {
		(avx.F64{}).ScaleTo(dst, a, scale)
	} else {
		f64.vanillaScaleTo(dst, a, scale)
	}
}

// Sum for []float64
func (f64 F64) Sum(a []float64) float64 {
	if cpu.X86.HasAVX2 {
		return (avx.F64{}).Sum(a)
	} else {
		return f64.vanillaSum(a)
	}
}

// Dot for []float64
func (f64 F64) Dot(a, b []float64) float64 {
	if cpu.X86.HasAVX2 {
		return (avx.F64{}).Dot(a, b)
	} else {
		return f64.vanillaDot(a, b)
	}
}

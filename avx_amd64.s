//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_avxFloat32Dot(SB), $0-32

    MOVQ n+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), DX
    MOVQ res+24(FP), CX

    WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
    LONG $0xf8e18349             // and    r9, -8
	JE LBB0_1
    LONG $0xff518d4d             // lea    r10, [r9 - 1]
    WORD $0x894c; BYTE $0xd0     // mov    rax, r10
    LONG $0x03e8c148             // shr    rax, 3
    LONG $0x01408d44             // lea    r8d, [rax + 1]
    LONG $0x03e08341             // and    r8d, 3
    LONG $0x18fa8349             // cmp    r10, 24
	JAE LBB0_13
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB0_5
	JMP LBB0_7
LBB0_1:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB0_7
LBB0_13:
    LONG $0xff508d4d             // lea    r10, [r8 - 1]
    WORD $0x2949; BYTE $0xc2     // sub    r10, rax
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    WORD $0xc031                 // xor    eax, eax
LBB0_14:
    LONG $0x0410fcc5; BYTE $0x86 // vmovups    ymm0, yword [rsi + 4*rax]
    LONG $0x5410fcc5; WORD $0x2086 // vmovups    ymm2, yword [rsi + 4*rax + 32]
    LONG $0x5c10fcc5; WORD $0x4086 // vmovups    ymm3, yword [rsi + 4*rax + 64]
    LONG $0x6410fcc5; WORD $0x6086 // vmovups    ymm4, yword [rsi + 4*rax + 96]
    LONG $0x9875e2c4; WORD $0x8204 // vfmadd132ps    ymm0, ymm1, yword [rdx + 4*rax]
    LONG $0xb86de2c4; WORD $0x8244; BYTE $0x20 // vfmadd231ps    ymm0, ymm2, yword [rdx + 4*rax + 32]
    LONG $0xb865e2c4; WORD $0x8244; BYTE $0x40 // vfmadd231ps    ymm0, ymm3, yword [rdx + 4*rax + 64]
    LONG $0xb85de2c4; WORD $0x8244; BYTE $0x60 // vfmadd231ps    ymm0, ymm4, yword [rdx + 4*rax + 96]
    LONG $0x20c08348             // add    rax, 32
    LONG $0xc828fcc5             // vmovaps    ymm1, ymm0
    LONG $0x04c28349             // add    r10, 4
	JNE LBB0_14
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB0_7
LBB0_5:
    LONG $0x02e0c148             // shl    rax, 2
    WORD $0xf749; BYTE $0xd8     // neg    r8
LBB0_6:
    LONG $0x0c10fcc5; BYTE $0x06 // vmovups    ymm1, yword [rsi + rax]
    LONG $0xb875e2c4; WORD $0x0204 // vfmadd231ps    ymm0, ymm1, yword [rdx + rax]
    LONG $0x20c08348             // add    rax, 32
    LONG $0x01c08349             // add    r8, 1
	JNE LBB0_6
LBB0_7:
    LONG $0xc816fac5             // vmovshdup    xmm1, xmm0
    LONG $0xc958fac5             // vaddss    xmm1, xmm0, xmm1
    LONG $0x0579e3c4; WORD $0x01d0 // vpermilpd    xmm2, xmm0, 1
    LONG $0xc958eac5             // vaddss    xmm1, xmm2, xmm1
    LONG $0x0479e3c4; WORD $0xe7d0 // vpermilps    xmm2, xmm0, 231
    LONG $0xc958eac5             // vaddss    xmm1, xmm2, xmm1
    LONG $0x197de3c4; WORD $0x01c0 // vextractf128    xmm0, ymm0, 1
    LONG $0xc958fac5             // vaddss    xmm1, xmm0, xmm1
    LONG $0xd016fac5             // vmovshdup    xmm2, xmm0
    LONG $0xc958eac5             // vaddss    xmm1, xmm2, xmm1
    LONG $0x0579e3c4; WORD $0x01d0 // vpermilpd    xmm2, xmm0, 1
    LONG $0xc958eac5             // vaddss    xmm1, xmm2, xmm1
    LONG $0x0479e3c4; WORD $0xe7c0 // vpermilps    xmm0, xmm0, 231
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JAE LBB0_12
    LONG $0xff478d4c             // lea    r8, [rdi - 1]
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
    LONG $0x03e08348             // and    rax, 3
	JE LBB0_11
    WORD $0xf748; BYTE $0xd8     // neg    rax
LBB0_10:
    LONG $0x107aa1c4; WORD $0x8e0c // vmovss    xmm1, dword [rsi + 4*r9]
    LONG $0x5972a1c4; WORD $0x8a0c // vmulss    xmm1, xmm1, dword [rdx + 4*r9]
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x01c18349             // add    r9, 1
    LONG $0x01c08348             // add    rax, 1
	JNE LBB0_10
LBB0_11:
    LONG $0x03f88349             // cmp    r8, 3
	JB LBB0_12
LBB0_15:
    LONG $0x107aa1c4; WORD $0x8e0c // vmovss    xmm1, dword [rsi + 4*r9]
    LONG $0x5972a1c4; WORD $0x8a0c // vmulss    xmm1, xmm1, dword [rdx + 4*r9]
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x107aa1c4; WORD $0x8e4c; BYTE $0x04 // vmovss    xmm1, dword [rsi + 4*r9 + 4]
    LONG $0x5972a1c4; WORD $0x8a4c; BYTE $0x04 // vmulss    xmm1, xmm1, dword [rdx + 4*r9 + 4]
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x107aa1c4; WORD $0x8e4c; BYTE $0x08 // vmovss    xmm1, dword [rsi + 4*r9 + 8]
    LONG $0x5972a1c4; WORD $0x8a4c; BYTE $0x08 // vmulss    xmm1, xmm1, dword [rdx + 4*r9 + 8]
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x107aa1c4; WORD $0x8e4c; BYTE $0x0c // vmovss    xmm1, dword [rsi + 4*r9 + 12]
    LONG $0x5972a1c4; WORD $0x8a4c; BYTE $0x0c // vmulss    xmm1, xmm1, dword [rdx + 4*r9 + 12]
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x04c18349             // add    r9, 4
    WORD $0x394c; BYTE $0xcf     // cmp    rdi, r9
	JNE LBB0_15
LBB0_12:
    VZEROUPPER
    RET




TEXT ·_avxFloat64Dot(SB), $0-32

    MOVQ n+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), DX
    MOVQ res+24(FP), CX

    WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
    LONG $0xfce18349             // and    r9, -4
	JE LBB1_1
    LONG $0xff518d4d             // lea    r10, [r9 - 1]
    WORD $0x894c; BYTE $0xd0     // mov    rax, r10
    LONG $0x02e8c148             // shr    rax, 2
    LONG $0x01408d44             // lea    r8d, [rax + 1]
    LONG $0x03e08341             // and    r8d, 3
    LONG $0x0cfa8349             // cmp    r10, 12
	JAE LBB1_13
    LONG $0xc057f9c5             // vxorpd    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB1_5
	JMP LBB1_7
LBB1_1:
    LONG $0xc057f9c5             // vxorpd    xmm0, xmm0, xmm0
	JMP LBB1_7
LBB1_13:
    LONG $0xff508d4d             // lea    r10, [r8 - 1]
    WORD $0x2949; BYTE $0xc2     // sub    r10, rax
    LONG $0xc957f1c5             // vxorpd    xmm1, xmm1, xmm1
    WORD $0xc031                 // xor    eax, eax
LBB1_14:
    LONG $0x0410fdc5; BYTE $0xc6 // vmovupd    ymm0, yword [rsi + 8*rax]
    LONG $0x5410fdc5; WORD $0x20c6 // vmovupd    ymm2, yword [rsi + 8*rax + 32]
    LONG $0x5c10fdc5; WORD $0x40c6 // vmovupd    ymm3, yword [rsi + 8*rax + 64]
    LONG $0x6410fdc5; WORD $0x60c6 // vmovupd    ymm4, yword [rsi + 8*rax + 96]
    LONG $0x98f5e2c4; WORD $0xc204 // vfmadd132pd    ymm0, ymm1, yword [rdx + 8*rax]
    LONG $0xb8ede2c4; WORD $0xc244; BYTE $0x20 // vfmadd231pd    ymm0, ymm2, yword [rdx + 8*rax + 32]
    LONG $0xb8e5e2c4; WORD $0xc244; BYTE $0x40 // vfmadd231pd    ymm0, ymm3, yword [rdx + 8*rax + 64]
    LONG $0xb8dde2c4; WORD $0xc244; BYTE $0x60 // vfmadd231pd    ymm0, ymm4, yword [rdx + 8*rax + 96]
    LONG $0x10c08348             // add    rax, 16
    LONG $0xc828fdc5             // vmovapd    ymm1, ymm0
    LONG $0x04c28349             // add    r10, 4
	JNE LBB1_14
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB1_7
LBB1_5:
    LONG $0x03e0c148             // shl    rax, 3
    WORD $0xf749; BYTE $0xd8     // neg    r8
LBB1_6:
    LONG $0x0c10fdc5; BYTE $0x06 // vmovupd    ymm1, yword [rsi + rax]
    LONG $0xb8f5e2c4; WORD $0x0204 // vfmadd231pd    ymm0, ymm1, yword [rdx + rax]
    LONG $0x20c08348             // add    rax, 32
    LONG $0x01c08349             // add    r8, 1
	JNE LBB1_6
LBB1_7:
    LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
    LONG $0xc958fbc5             // vaddsd    xmm1, xmm0, xmm1
    LONG $0x197de3c4; WORD $0x01c0 // vextractf128    xmm0, ymm0, 1
    LONG $0xc958fbc5             // vaddsd    xmm1, xmm0, xmm1
    LONG $0x0579e3c4; WORD $0x01c0 // vpermilpd    xmm0, xmm0, 1
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JAE LBB1_12
    LONG $0xff478d4c             // lea    r8, [rdi - 1]
    WORD $0x294d; BYTE $0xc8     // sub    r8, r9
    WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
    LONG $0x03e08348             // and    rax, 3
	JE LBB1_11
    WORD $0xf748; BYTE $0xd8     // neg    rax
LBB1_10:
    LONG $0x107ba1c4; WORD $0xce0c // vmovsd    xmm1, qword [rsi + 8*r9]
    LONG $0x5973a1c4; WORD $0xca0c // vmulsd    xmm1, xmm1, qword [rdx + 8*r9]
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    LONG $0x01c18349             // add    r9, 1
    LONG $0x01c08348             // add    rax, 1
	JNE LBB1_10
LBB1_11:
    LONG $0x03f88349             // cmp    r8, 3
	JB LBB1_12
LBB1_15:
    LONG $0x107ba1c4; WORD $0xce0c // vmovsd    xmm1, qword [rsi + 8*r9]
    LONG $0x5973a1c4; WORD $0xca0c // vmulsd    xmm1, xmm1, qword [rdx + 8*r9]
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    LONG $0x107ba1c4; WORD $0xce4c; BYTE $0x08 // vmovsd    xmm1, qword [rsi + 8*r9 + 8]
    LONG $0x5973a1c4; WORD $0xca4c; BYTE $0x08 // vmulsd    xmm1, xmm1, qword [rdx + 8*r9 + 8]
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    LONG $0x107ba1c4; WORD $0xce4c; BYTE $0x10 // vmovsd    xmm1, qword [rsi + 8*r9 + 16]
    LONG $0x5973a1c4; WORD $0xca4c; BYTE $0x10 // vmulsd    xmm1, xmm1, qword [rdx + 8*r9 + 16]
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    LONG $0x107ba1c4; WORD $0xce4c; BYTE $0x18 // vmovsd    xmm1, qword [rsi + 8*r9 + 24]
    LONG $0x5973a1c4; WORD $0xca4c; BYTE $0x18 // vmulsd    xmm1, xmm1, qword [rdx + 8*r9 + 24]
    LONG $0xc158fbc5             // vaddsd    xmm0, xmm0, xmm1
    LONG $0x0111fbc5             // vmovsd    qword [rcx], xmm0
    LONG $0x04c18349             // add    r9, 4
    WORD $0x394c; BYTE $0xcf     // cmp    rdi, r9
	JNE LBB1_15
LBB1_12:
    VZEROUPPER
    RET

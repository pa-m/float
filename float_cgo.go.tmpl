//+build cgo,amd64,!noasm

package float
import(
    "fmt"
    "sort"
	"golang.org/x/sys/cpu"
	"github.com/pa-m/float/avx"
{{range .In.floatTypes}}
    math{{.bits}} "{{.mathmodurl}}"
{{end}}
)

const lenCgoAvx2Faster=80

{{range .In.floatTypes}}

// AddTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) AddTo(dst,a,b []float{{.bits}}) {
    l:=len(a)
	b=b[:l]
	dst=dst[:l]
	if cpu.X86.HasAVX2 && l>lenCgoAvx2Faster {
		 //avx_float{{.bits}}_addto(a,b,dst)
		 avx.F{{.bits}}{}.AddTo(dst,a,b)
	}else{
		 f{{.bits}}.unrolledAddTo(dst,a,b)
	}
}
// SubTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) SubTo(dst,a,b []float{{.bits}}) {
    l:=len(a)
	b=b[:l]
	dst=dst[:l]
	if cpu.X86.HasAVX2 && l>lenCgoAvx2Faster {
		 (avx.F{{.bits}}{}).SubTo(dst,a,b)
	}else{
		 f{{.bits}}.unrolledSubTo(dst,a,b)
	}
}
// MulTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) MulTo(dst,a,b []float{{.bits}}) {
    l:=len(a)
	b=b[:l]
	dst=dst[:l]
	if cpu.X86.HasAVX2 && l>lenCgoAvx2Faster {
		 (avx.F{{.bits}}{}).MulTo(dst,a,b)
	}else{
		 f{{.bits}}.unrolledMulTo(dst,a,b)
	}
}
// ScaleTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) ScaleTo(dst,a []float{{.bits}},scale float{{.bits}}) {
    l:=len(a)
	dst=dst[:l]
	if cpu.X86.HasAVX2 && l>lenCgoAvx2Faster {
		 (avx.F{{.bits}}{}).ScaleTo(dst,a,scale)
	}else{
		 f{{.bits}}.unrolledScaleTo(dst,a,scale)
	}
}

// Sum for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) Sum(a []float{{.bits}}) float{{.bits}} {
	if cpu.X86.HasAVX2 {
		return avxFloat{{.bits}}Sum(a)
	}else{
		return f{{.bits}}.unrolledSum(a)
	}
}

// Dot for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) Dot(a,b []float{{.bits}}) float{{.bits}} {
    l:=len(a)
	b=b[:l]
	if cpu.X86.HasAVX2 && cpu.X86.HasFMA  {
		return avxFloat{{.bits}}Dot(a,b)
	}else{
		return f{{.bits}}.unrolledDot(a,b)
	}
}
{{end}}

//+build amd64,cgo

package float
import(
    "fmt"
    "sort"
	"golang.org/x/sys/cpu"
	"./avx"
{{range .In}}
    math{{.bits}} "{{.mathmodurl}}"
{{end}}
)
{{range .In}}

// AddTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) AddTo(dst,a,b []float{{.bits}}) {
	if cpu.X86.HasAVX2 {
		 (avx.F{{.bits}}{}).AddTo(dst,a,b)
	}else{
		 f{{.bits}}.vanillaAddTo(dst,a,b)
	}
}
// SubTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) SubTo(dst,a,b []float{{.bits}}) {
	if cpu.X86.HasAVX2 {
		 (avx.F{{.bits}}{}).SubTo(dst,a,b)
	}else{
		 f{{.bits}}.vanillaSubTo(dst,a,b)
	}
}
// MulTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) MulTo(dst,a,b []float{{.bits}}) {
	if cpu.X86.HasAVX2 {
		 (avx.F{{.bits}}{}).MulTo(dst,a,b)
	}else{
		 f{{.bits}}.vanillaMulTo(dst,a,b)
	}
}
// ScaleTo  for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) ScaleTo(dst,a []float{{.bits}},scale float{{.bits}}) {
	if cpu.X86.HasAVX2 {
		 (avx.F{{.bits}}{}).ScaleTo(dst,a,scale)
	}else{
		 f{{.bits}}.vanillaScaleTo(dst,a,scale)
	}
}

// Sum for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) Sum(a []float{{.bits}}) float{{.bits}} {
	if cpu.X86.HasAVX2 {
		return (avx.F{{.bits}}{}).Sum(a)
	}else{
		return f{{.bits}}.vanillaSum(a)
	}
}

// Dot for []float{{.bits}}
func (f{{.bits}} F{{.bits}}) Dot(a,b []float{{.bits}}) float{{.bits}} {
	if cpu.X86.HasAVX2 {
		return (avx.F{{.bits}}{}).Dot(a,b)
	}else{
		return f{{.bits}}.vanillaDot(a,b)
	}
}
{{end}}

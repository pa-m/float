// Code generated by float_test.go.tmpl. DO NOT EDIT.

package float

import (
	"fmt"
	"testing"
)

func ExampleSign32() {
	fmt.Println(f32.Sign(-.1), f32.Sign(0), f32.Sign(.1))
	// Output:
	//-1 1 1
}

func ExampleSort32() {
	a := []float32{4, 3, 2}
	F32s(a).Sort()
	fmt.Println(a)
	// Output:
	//[2 3 4]
}

func ExampleSearch32() {
	fmt.Println(F32s([]float32{2, 3, 4}).Search(3))
	// Output:
	// 1
}
func ExampleArgSort32() {
	a := []float32{4, 3, 2}
	fmt.Println(f32.ArgSort(a))
	// Output:
	//[2 1 0]
}

func ExampleMedian32() {
	fmt.Println(f32.Median([]float32{5, 2, 1}))
	// Output:
	// 2
}

func ExampleSum32() {
	fmt.Println(f32.Sum([]float32{5, 2, 1}))
	// Output:
	// 8
}

func ExampleMean32() {
	fmt.Println(f32.Mean([]float32{6, 2, 1}))
	// Output:
	// 3
}
func ExampleMaxIdx32() {
	fmt.Println(f32.MaxIdx([]float32{6, 2, 1}))
	// Output:
	// 0
}
func ExampleMinIdx32() {
	fmt.Println(f32.MinIdx([]float32{6, 2, 1}))
	// Output:
	// 2
}
func ExampleMax32() {
	fmt.Println(f32.Max([]float32{6, 2, 1}))
	// Output:
	// 6
}
func ExampleMin32() {
	fmt.Println(f32.Min([]float32{6, 2, 1}))
	// Output:
	// 1
}

func BenchmarkSum32(b *testing.B) {
	a := make([]float32, 8760)
	for i := 0; i < b.N; i++ {
		f32.Sum(a)
	}
}

func BenchmarkDot32(b *testing.B) {
	a := make([]float32, 8760)
	for i := 0; i < b.N; i++ {
		f32.Dot(a, a)
	}
}

func ExampleSign64() {
	fmt.Println(f64.Sign(-.1), f64.Sign(0), f64.Sign(.1))
	// Output:
	//-1 1 1
}

func ExampleSort64() {
	a := []float64{4, 3, 2}
	F64s(a).Sort()
	fmt.Println(a)
	// Output:
	//[2 3 4]
}

func ExampleSearch64() {
	fmt.Println(F64s([]float64{2, 3, 4}).Search(3))
	// Output:
	// 1
}
func ExampleArgSort64() {
	a := []float64{4, 3, 2}
	fmt.Println(f64.ArgSort(a))
	// Output:
	//[2 1 0]
}

func ExampleMedian64() {
	fmt.Println(f64.Median([]float64{5, 2, 1}))
	// Output:
	// 2
}

func ExampleSum64() {
	fmt.Println(f64.Sum([]float64{5, 2, 1}))
	// Output:
	// 8
}

func ExampleMean64() {
	fmt.Println(f64.Mean([]float64{6, 2, 1}))
	// Output:
	// 3
}
func ExampleMaxIdx64() {
	fmt.Println(f64.MaxIdx([]float64{6, 2, 1}))
	// Output:
	// 0
}
func ExampleMinIdx64() {
	fmt.Println(f64.MinIdx([]float64{6, 2, 1}))
	// Output:
	// 2
}
func ExampleMax64() {
	fmt.Println(f64.Max([]float64{6, 2, 1}))
	// Output:
	// 6
}
func ExampleMin64() {
	fmt.Println(f64.Min([]float64{6, 2, 1}))
	// Output:
	// 1
}

func BenchmarkSum64(b *testing.B) {
	a := make([]float64, 8760)
	for i := 0; i < b.N; i++ {
		f64.Sum(a)
	}
}

func BenchmarkDot64(b *testing.B) {
	a := make([]float64, 8760)
	for i := 0; i < b.N; i++ {
		f64.Dot(a, a)
	}
}

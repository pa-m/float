package float

import (
	"fmt"
	"testing"
	"golang.org/x/sys/cpu"
	{{range .In.floatTypes}}
	"gonum.org/v1/gonum/blas/blas{{.bits}}"
	{{end}}
)

func TestCPU(t*testing.T) {
	fmt.Println("cpu.X86.HasAVX2",cpu.X86.HasAVX2)
	fmt.Println("cpu.X86.HasFMA",cpu.X86.HasFMA)
	// Output:
}
func blas32Dot(x,y []float32) float32{
	return blas32.Dot(len(x),blas32.Vector{1,x},blas32.Vector{1,y})
}
func blas64Dot(x,y []float64) float64{
	return blas64.Dot(blas64.Vector{len(x),1,x},blas64.Vector{len(y),1,y})
}

{{range .In.floatTypes}}
func ExampleSign{{.bits}}() {
	fmt.Println(f{{.bits}}.Sign(-.1), f{{.bits}}.Sign(0), f{{.bits}}.Sign(.1))
	// Output:
	//-1 1 1
}

func ExampleSort{{.bits}}() {
	a := []float{{.bits}}{4, 3, 2}
	F{{.bits}}s(a).Sort()
	fmt.Println(a)
	// Output:
	//[2 3 4]
}

func ExampleSearch{{.bits}}() {
	fmt.Println(F{{.bits}}s([]float{{.bits}}{2, 3, 4}).Search(3))
	// Output:
	// 1
}
func ExampleArgSort{{.bits}}() {
	a := []float{{.bits}}{4, 3, 2}
	fmt.Println(f{{.bits}}.ArgSort(a))
	// Output:
	//[2 1 0]
}

func ExampleMedian{{.bits}}() {
	fmt.Println(f{{.bits}}.Median([]float{{.bits}}{5, 2, 1}))
	// Output:
	// 2
}

func random{{.bits}}(n int)[]float{{.bits}} {
	x:=make([]float{{.bits}},n)
	for i:=range x {
		x[i] = rand.Float{{.bits}}()
	}
	return x
}

func ExampleScale{{.bits}}() {
	x := random{{.bits}}(123)
	scale := rand.Float{{.bits}}()
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]*scale
	}
	for _,o:=range []struct{Name string;Func func(scale float{{.bits}}, x []float{{.bits}})}{
		{"Scale",f{{.bits}}.Scale},
	}{
		copy(actual,x)
		o.Func(scale,actual)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}

	// Output:
}

func ExampleAdd{{.bits}}() {
	x := random{{.bits}}(123)
	y := random{{.bits}}(123)
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]+y[i]
	}
	for _,o:=range []struct{Name string;Func func(x,y []float{{.bits}})}{
		{"Add",f{{.bits}}.Add},
	}{
		copy(actual,x)
		o.Func(actual,y)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}

	// Output:
}

func ExampleMul{{.bits}}() {
	x := random{{.bits}}(123)
	y := random{{.bits}}(123)
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]*y[i]
	}
	for _,o:=range []struct{Name string;Func func(x,y []float{{.bits}})}{
		{"Add",f{{.bits}}.Mul},
	}{
		copy(actual,x)
		o.Func(actual,y)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}

	// Output:
}

func ExampleAddTo{{.bits}}() {
	x := random{{.bits}}(123)
	y := random{{.bits}}(123)
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]+y[i]
	}
	for _,o:=range []struct{Name string;Func func(dst,x,y []float{{.bits}})}{
		{"vanilla",f{{.bits}}.vanillaAddTo},
		{"unrolled",f{{.bits}}.unrolledAddTo},
		{"avx",f{{.bits}}.AddTo},
	}{

		o.Func(actual,x,y)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}

	// Output:
}

func ExampleSubTo{{.bits}}() {
	x := random{{.bits}}(123)
	y := random{{.bits}}(123)
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]-y[i]
	}
	for _,o:=range []struct{Name string;Func func(dst,x,y []float{{.bits}})}{
		{"vanilla",f{{.bits}}.vanillaSubTo},
		{"unrolled",f{{.bits}}.unrolledSubTo},
		{"avx",f{{.bits}}.SubTo},
	}{

		o.Func(actual,x,y)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}
	// Output:
}

func ExampleMulTo{{.bits}}() {
	x := random{{.bits}}(123)
	y := random{{.bits}}(123)
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]*y[i]
	}
	for _,o:=range []struct{Name string;Func func(dst,x,y []float{{.bits}})}{
		{"vanilla",f{{.bits}}.vanillaMulTo},
		{"unrolled",f{{.bits}}.unrolledMulTo},
		{"avx",f{{.bits}}.MulTo},
	}{

		o.Func(actual,x,y)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}
	// Output:
}

func ExampleScaleTo{{.bits}}() {
	x := random{{.bits}}(123)
	scale := rand.Float{{.bits}}()
	expected := make([]float{{.bits}},123)
	actual := make([]float{{.bits}},123)
	for i:=range x {
		expected[i] = x[i]*scale
	}
	for _,o:=range []struct{Name string;Func func(dst,x []float{{.bits}},scale float{{.bits}})}{
		{"vanilla",f{{.bits}}.vanillaScaleTo},
		{"unrolled",f{{.bits}}.unrolledScaleTo},
		{"avx",f{{.bits}}.ScaleTo},
	}{

		o.Func(actual,x,scale)
		for i:=range x{
			if f{{.bits}}.Abs(actual[i]-expected[i])>.001 {
				fmt.Printf("%s Expected[%d] %g actual %g\n", o.Name, i, expected[i], actual[i])
			}
		}
	}
	// Output:
}

func ExampleSum{{.bits}}() {
	x := random{{.bits}}(123)
	var expected,actual float{{.bits}}
	for i:=range x {
		expected+= x[i]
	}
	for _,o:=range []struct{Name string;Func func(x []float{{.bits}})float{{.bits}}}{
		{"vanilla",f{{.bits}}.vanillaSum},
		{"unrolled",f{{.bits}}.unrolledSum},
		{"avx",f{{.bits}}.Sum},
	}{

		actual=o.Func(x)
			if f{{.bits}}.Abs(actual-expected)>.001 {
				fmt.Printf("%s Expected %g actual %g\n", o.Name, expected, actual)
			}
		
	}
	// Output:
}

func ExampleDot{{.bits}}() {
	
	x,y := random{{.bits}}(123), random{{.bits}}(123)
	var expected,actual float{{.bits}}
	for i:=range x {
		expected+= x[i]*y[i]
	}
	for _,o:=range []struct{Name string;Func func(x,y []float{{.bits}})float{{.bits}}}{
		{"vanilla",f{{.bits}}.vanillaDot},
		{"unrolled",f{{.bits}}.unrolledDot},
		{"avx",f{{.bits}}.Dot},
	}{

		actual=o.Func(x, y)
			if f{{.bits}}.Abs(actual-expected)>.001 {
				fmt.Printf("%s Expected %g actual %g\n", o.Name, expected, actual)
			}
		
	}
	// Output:
}

func ExampleMean{{.bits}}() {
	fmt.Println(f{{.bits}}.Mean([]float{{.bits}}{6, 2, 1}))
	// Output:
	// 3
}
func ExampleMaxIdx{{.bits}}() {
	fmt.Println(f{{.bits}}.MaxIdx([]float{{.bits}}{6, 2, 1}))
	// Output:
	// 0
}
func ExampleMinIdx{{.bits}}() {
	fmt.Println(f{{.bits}}.MinIdx([]float{{.bits}}{6, 2, 1}))
	// Output:
	// 2
}
func ExampleMax{{.bits}}() {
	fmt.Println(f{{.bits}}.Max([]float{{.bits}}{6, 2, 1}))
	// Output:
	// 6
}
func ExampleMin{{.bits}}() {
	fmt.Println(f{{.bits}}.Min([]float{{.bits}}{6, 2, 1}))
	// Output:
	// 1
}

func ExampleAlloc{{.bits}}() {
	var a,b F{{.bits}}s
	f{{.bits}}.Alloc(8760,&a,&b)
	if a==nil||b==nil||len(a)!=len(b) {fmt.Println("unexpected")}
	//Output:
}
func ExampleEqualWithinAbs{{.bits}}() {
	var expected,actual bool
	expected,actual=true,f{{.bits}}.EqualWithinAbs(1,1.1,.101)
	if expected!=actual {fmt.Printf("expected %v actual %v\n", expected, actual)}
	expected,actual=false,f{{.bits}}.EqualWithinAbs(1,1.1,.099)
	if expected!=actual {fmt.Printf("expected %v actual %v\n", expected, actual)}
	// Output:	
}
func BenchmarkSum{{.bits}}(b *testing.B) {
	a := make([]float{{.bits}}, 8760)
	
	for _, f := range []struct {
		Name string
		Func func([]float{{.bits}}) float{{.bits}}
	}{
		{"vanillaSum", f{{.bits}}.vanillaSum},
		{"unrolledSum", f{{.bits}}.unrolledSum},
		{"Sum", f{{.bits}}.Sum},
	} {
		b.Run(f.Name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				f.Func(a)
			}
		})
	}
}


func BenchmarkDot{{.bits}}(b *testing.B) {
	a := make([]float{{.bits}}, 81818)
	for _,l:=range []int{818,8181,81818}{
			for _, f := range []struct {
				Name string
				Func func(x,y []float{{.bits}}) float{{.bits}}
			}{
				{fmt.Sprintf("vanillaDot/%d",l), f{{.bits}}.vanillaDot},
				{fmt.Sprintf("unrolledDot/%d",l), f{{.bits}}.unrolledDot},
				{fmt.Sprintf("blas{{.bits}}.Dot/%d",l),blas{{.bits}}Dot},
				{fmt.Sprintf("avx{{.bits}}.Dot/%d",l), (avx.F{{.bits}}{}).Dot},
				{fmt.Sprintf("asm_avx{{.bits}}.Dot/%d",l), avxFloat{{.bits}}Dot},
			} {
				b.Run(f.Name, func(b *testing.B) {
					for i := 0; i < b.N; i++ {
						f.Func(a[:l],a[:l])
					}
				})
			}
	}
}

func BenchmarkAddTo{{.bits}}(b *testing.B){
	a := make([]float{{.bits}}, 81818)
	for _,l:=range []int{818,8181,81818} {
			for _, f := range []struct {
				Name string
				Func func(dst,x,y []float{{.bits}}) 
			}{
				{fmt.Sprintf("vanillaAddTo/%d", l), f{{.bits}}.vanillaAddTo},
				{fmt.Sprintf("unrolledAddTo/%d", l), f{{.bits}}.unrolledAddTo},
				{fmt.Sprintf("avx{{.bits}}.AddTo/%d",l), (avx.F{{.bits}}{}).AddTo},
				//{fmt.Sprintf("asm_avx{{.bits}}.AddTo/%d",l), avxFloat{{.bits}}AddTo},
			} {
				b.Run(f.Name, func(b *testing.B) {
					for i := 0; i < b.N; i++ {
						f.Func(a[:l],a[:l],a[:l])
					}
				})
			}
	}
}

{{end}}